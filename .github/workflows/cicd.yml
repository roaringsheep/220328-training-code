name: CICD

#These are the events that this workflow will be triggered for
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
  

permissions:
  pull-requests: read 
  #allows SonarCloud to decorate PRs with analysis results
  
env:
  WORKING_DIRECTORY: 4-DevOps/PokemonApp

jobs:
  Analysis:
    runs-on: windows-latest
    
    steps:
      - name: checkout repository
        uses: actions/checkout@v3
        with:
         fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
         
      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v2.0.0
        with:
          # Optional SDK version(s) to use. If not provided, will install global.json version when available. Examples: 2.2.104, 3.1, 3.1.x
          dotnet-version: 6.0.x
    
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 1.11

      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
          
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v1
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
          
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
      
      - name: Test
        run: |
          dotnet test ${{env.WORKING_DIRECTORY}} --logger trx --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
      
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"roaringsheep_220328-training-code" /o:"roaringsheep" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.opencover.reportsPaths="**/TestResults/**/coverage.opencover.xml" -d:sonar.cs.vstest.reportsPaths="**/TestResults/*.trx"
          dotnet build ${{env.WORKING_DIRECTORY}}\PokemonApi
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
  build:
    runs-on: ubuntu-latest
    needs: Analysis
    steps:
    - name: checkout repository
      uses: actions/checkout@v3
        
    - name: Docker Setup Buildx
      uses: docker/setup-buildx-action@v1.6.0

    # Log in to docker to be able to push to our profile
    - name: Docker Login
      uses: docker/login-action@v1.14.1
      with:
        # Username used to log against the Docker registry
        username: ${{ secrets.DOCKER_USERNAME }}
        # Password or personal access token used to log against the Docker registry
        password: ${{ secrets.DOCKER_PASSWORD }}

#     - name: create-json
#       # You may pin to the exact commit or the version.
#       # uses: jsdaniell/create-json@4a4e510bf85e1193b9fca74074d2bf4ee26de08c
#       uses: jsdaniell/create-json@1.1.2
#       with:
#         name: appsettings.json
#         # The json string that can be a secret of the github repo or a string of a json. | "{"title": "my json"}" 
#         json: ${{secrets.APPSETTINGS}}
#         # Optional subfolder directory to save the json file. | src/ 
#         dir: ${{env.WORKING_DIRECTORY}}/PokemonApi

    # We build our docker image and then push to docker hub
    - name: Build and push Docker images
      uses: docker/build-push-action@v2.10.0
      with:
        # Build's context is the set of files located in the specified PATH or URL
        context: ${{env.WORKING_DIRECTORY}}
        # Path to the Dockerfile
        file: ${{env.WORKING_DIRECTORY}}/Dockerfile
        tags: index.docker.io/${{secrets.DOCKER_USERNAME}}/pokeapp:${{github.sha}}
        push: true

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Azure WebApp
      uses: Azure/webapps-deploy@v2
      with:
        # Name of the Azure Web App
        app-name: 'poke-api'
        # Applies to Web Apps(Windows and Linux) and Web App Containers(linux). Multi container scenario not supported. Publish profile (*.publishsettings) file contents with Web Deploy secrets
        publish-profile: ${{secrets.AZURE_PUBLISH_PROFILE_POKE_API}}
        # Applies to Web App Containers only: Specify the fully qualified container image(s) name. For example, 'myregistry.azurecr.io/nginx:latest' or 'python:3.7.2-alpine/'. For multi-container scenario multiple container image names can be provided (multi-line separated)
        images: index.docker.io/${{secrets.DOCKER_USERNAME}}/pokeapp:${{github.sha}}
